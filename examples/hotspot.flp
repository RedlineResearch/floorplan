
// Embedding in a project with 'header' / 'footer':
%begin header
#ifndef SHARE_NATIVE_FLP_TYPES_HPP
#define SHARE_NATIVE_FLP_TYPES_HPP
%end

%begin noglobal // Definitions in some way referenced by JVM

Header @(1 words)@ -> union {
    seq { MarkWord, KlassPtr, ArrLen, ArrGap }  // 3 words
  | seq { MarkWord, NarrowKlass, ArrLen }       // 2 words
  | seq { MarkWord, KlassPtr }                  // 2 words
  | seq { MarkWord, NarrowKlass, KlassGap }     // 2 words
}

%transition Header 0 ( is_arr && !UseCompressedOops)
%transition Header 1 ( is_arr &&  UseCompressedOops)
%transition Header 2 (!is_arr && !UseCompressedOops)
%transition Header 3 (!is_arr &&  UseCompressedOops)

// transition_FLP_Header(qname, obj)
// transition_Header(Evacuated_Object_Header, obj)

// transition_FLP_Evacuated_Object_Header(obj)

KlassWord -> union {
    seq { KlassPtr }
  | seq { NarrowKlass, KlassGap }
}

KlassPtr -> Klass ptr
NarrowKlass -> 4 bytes
MarkWord   @(1 words)@ -> 1 words
ForwardPtr @(1 words)@ -> Header ptr
ArrLen     @(4 bytes)@ -> 4 bytes
KlassGap   @(4 bytes)@ -> 4 bytes
ArrGap     @(4 bytes)@ -> 4 bytes

Guard -> # bytes
Poison -> 1 pages
Polling -> 1 pages

Card -> # bytes
Bitmap -> # bytes

// TODO: some of these might be less than precise, in part because I haven't dug deeper
// into the code operating over some of these types.

// Note to self: inline decls cause the types generated to not be globally
// (top-level) referenceable, which is often desirable.

TLAB -> union {
    FreshT -> # pages
  | NewT -> # pages
  | FastT -> # words
  | SlowT -> # words
  | # Object
}

JavaHeap -> union { ArrayObj | ClassObj }

// TODO - these two definitions share conflicting headers.
ClassObj -> seq { Header, # Prim }
ArrayObj -> seq {
  Header,
  # union { Prim | Type | Symbol }
}

// We aren't tracking primitive fields of class objects just yet,
// so filter out those types until we support configurability of a larger
// number of types.
%filterout "ClassObj_Prim.*"

Type -> union { # words | NoZero -> # words } // TODO(?)
Symbol -> # words // TODO(?)

Prim -> union {
    Bool -> 1 bytes
  | Char -> 1 bytes
  | Float -> 4 bytes
  | Double -> 8 bytes
  | Byte -> 1 bytes
  | Short -> 2 bytes
  | Int -> 4 bytes
  | Long -> 8 bytes
  | ObjPointer -> 1 words
}

// Possible syntactic extension to get rid of types for which one hasn't written
// code that might need those types (and subtypes):
// %filterout "JavaHeap_ArrayObj$" // <-- regex backend for eliminating unnecessary types
// %filterout "((" // ERROR

PLAB -> union { AlignFill -> # bytes | # words }

Eden -> union { Forwarded -> # bytes | Fast -> Object | Slow -> Object }

%end // (noglobal) end JVM referenced types

Humongous -> union {
    Compacted
}
// An Object doesn't distinguish between a class object and an array object
// except as insofar as you can ask for the ArrLen field of an Object. This
// provides a unified interface to objects when you need it (much like the
// definition of oopDesc) and a disjoint one when you don't (ClassObj / ArrayObj).
// Certain code paths know e.g. that an object is being allocated and the size
// of the underlying memory in words, but not the variant.
Object -> seq { Header, # words }

Dummy -> Object
Compacted -> Object
Evacuated -> Object

Reserved -> JVM
Committed -> JVM

// Keep only reserved/committed types of depth one into the JVM type, e.g.
// keep "FLP_Reserved_JVM_Virtual" but git rid of "FLP_Reserved_JVM_Virtual_Tail" etc.
// The key in the following regex is that it starts at the beginning of the type name
// and *ends* with an underscore, so it filters out depth 2 and greater.
%filterout "^(Reserved|Committed)_JVM_[^_]*_"

%filterout "ClassObj_Header_Arr(Len|Gap)$"

JVM -> union {
    Page @|1 pages|@ -> union { 1 pages | Poison | Polling | Guard }
  | Virtual -> union { Tail -> # words | Expanded -> # words }
  | BlockOffsetTable -> # words
  | CardTable -> seq { # Card, Guard }
  | CardCounts -> # pages
  | Verifier -> Bitmap
  | Prev -> Bitmap
  | Next -> Bitmap
  | IndirectionTable -> # bytes
  | RemSet -> # bytes
  | JavaHeap
  | Metadata -> # bytes
  | TLAB
  | PLAB
  | Eden
  | Evacuated
  | Region -> union { FreeR -> # words | AllocR -> # words }
}

// TODO - these primarily correspond to source code locations in which instrumentation is
// already present, but need to be refined further with-respect-to layout. This way the
// types get defined for generation purposes and to move forward with testing the pipeline.
FreeRegion -> # bytes
MallocHeap -> # bytes
OSMallocUserData -> # bytes
GuardedMemory -> # bytes
UninitGuardedMemory -> # bytes
HeapRegionPtr -> 1 words
LoggingBuf -> # bytes
ChunkInPool -> # bytes
FreshChunk -> # bytes
FreshChunkReqBytes -> # bytes
Chunk -> # bytes
ChunkReqBytes -> # bytes
ArenaMalloc -> # bytes
FileMapHeader -> # bytes
ClasspathEntryPtr -> 1 words
ArchiveHeader -> # words
DynamicHeader -> # words
OccupancyMap -> # words
LinesPrinter -> # bytes
ResourceAreaBytes -> # bytes
NativeMethodPrefixPtr -> 1 words
JVMTI -> union {
    Alloc -> # bytes
  | InstanceKlassPtr -> 1 words
  | TagHashmapEntry -> # bytes
  | CachedClassfileData -> # bytes
}
UnsafeAlloc -> # bytes
NMTTesting -> # bytes
DiagnosticString -> # bytes
DumpWriterBuffer -> # bytes
DumpWriterPath -> # bytes
ELFSectionData -> # bytes
ELFFilePath -> # bytes
ThreadStack -> # bytes
JavaHeapRebuiltRegion -> # bytes
FreeSetTrashRegion -> # bytes
ClassOopSizeField -> # bytes
FreeSetHumongousAllocated -> # bytes
FreeSetHumongousWasted -> # bytes
FreeSetSingleAllocated -> # bytes
NewGCLAB -> # bytes
CSetTrashed -> # bytes
HumongousTrashed -> # bytes
CompactibleSpaceForwardeePtr -> 1 words
EvacuatedForwardeePtr -> 1 words
UpdatedRefsForwardee -> 1 words
ClassOopSizeFieldDummy -> # bytes
G1CMMarkStack -> # bytes
BitmapRegion -> # bytes
CompactedForwardee -> # bytes
HumongousForwardee -> # bytes

%begin footer
#endif
%end
